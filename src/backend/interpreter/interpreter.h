/* This file is part of the dynarmic project.
 * Copyright (c) 2020 MerryMage
 * This software may be used and distributed according to the terms of the GNU
 * General Public License version 2 or any later version.
 */

#pragma once

#include "backend/interpreter/value.h"
#include "frontend/ir/cond.h"

namespace Dynarmic::IR {
class Inst;
} // namespace Dynarmic::IR

namespace Dynarmic::Backend::Interpreter {

using NZCV = u32;
struct ExecutionContext;

class Interpreter {
protected:
    Interpreter();
    virtual ~Interpreter();

    virtual bool ConditionPassed(IR::Cond cond) = 0;

    // Basics
    void ExecuteVoid();
    void ExecuteIdentity(ExecutionContext&, IR::Inst*);
    void ExecuteBreakpoint();

    // Hints
    void ExecutePushRSB(u64);

    // Pseudo-operations
    void ExecuteGetCarryFromOp(ExecutionContext&, IR::Inst*);
    void ExecuteGetOverflowFromOp(ExecutionContext&, IR::Inst*);
    u32 ExecuteGetGEFromOp(ResultAndGE<u32>);
    NZCV ExecuteGetNZCVFromOp(ResultAndNZCV<u32>);
    Vector ExecuteGetUpperFromOp(UpperAndLower);
    Vector ExecuteGetLowerFromOp(UpperAndLower);

    NZCV ExecuteNZCVFromPackedFlags(u32);

    // Calculations
    u64 ExecutePack2x32To1x64(u32, u32);
    Vector ExecutePack2x64To1x128(u64, u64);
    u32 ExecuteLeastSignificantWord(u64);
    ResultAndCarry<u32> ExecuteMostSignificantWord(u64);
    u16 ExecuteLeastSignificantHalf(u32);
    u8 ExecuteLeastSignificantByte(u32);
    bool ExecuteMostSignificantBit(u32);
    bool ExecuteIsZero32(u32);
    bool ExecuteIsZero64(u64);
    bool ExecuteTestBit(u64, u8);
    u32 ExecuteConditionalSelect32(IR::Cond, u32, u32);
    u64 ExecuteConditionalSelect64(IR::Cond, u64, u64);
    NZCV ExecuteConditionalSelectNZCV(IR::Cond, NZCV, NZCV);
    ResultAndCarry<u32> ExecuteLogicalShiftLeft32(u32, u8, bool);
    u64 ExecuteLogicalShiftLeft64(u64, u8);
    ResultAndCarry<u32> ExecuteLogicalShiftRight32(u32, u8, bool);
    u64 ExecuteLogicalShiftRight64(u64, u8);
    ResultAndCarry<u32> ExecuteArithmeticShiftRight32(u32, u8, bool);
    u64 ExecuteArithmeticShiftRight64(u64, u8);
    ResultAndCarry<u32> ExecuteRotateRight32(u32, u8, bool);
    u64 ExecuteRotateRight64(u64, u8);
    ResultAndCarry<u32> ExecuteRotateRightExtended(u32, bool);
    ResultAndNZCV<u32> ExecuteAdd32(u32, u32, bool);
    ResultAndNZCV<u64> ExecuteAdd64(u64, u64, bool);
    ResultAndNZCV<u32> ExecuteSub32(u32, u32, bool);
    ResultAndNZCV<u64> ExecuteSub64(u64, u64, bool);
    u32 ExecuteMul32(u32, u32);
    u64 ExecuteMul64(u64, u64);
    u64 ExecuteSignedMultiplyHigh64(u64, u64);
    u64 ExecuteUnsignedMultiplyHigh64(u64, u64);
    u32 ExecuteUnsignedDiv32(u32, u32);
    u64 ExecuteUnsignedDiv64(u64, u64);
    s32 ExecuteSignedDiv32(s32, s32);
    s64 ExecuteSignedDiv64(s64, s64);
    u32 ExecuteAnd32(u32, u32);
    u64 ExecuteAnd64(u64, u64);
    u32 ExecuteEor32(u32, u32);
    u64 ExecuteEor64(u64, u64);
    u32 ExecuteOr32(u32, u32);
    u64 ExecuteOr64(u64, u64);
    u32 ExecuteNot32(u32);
    u64 ExecuteNot64(u64);
    s32 ExecuteSignExtendByteToWord(s8);
    s32 ExecuteSignExtendHalfToWord(s16);
    s64 ExecuteSignExtendByteToLong(s8);
    s64 ExecuteSignExtendHalfToLong(s16);
    s64 ExecuteSignExtendWordToLong(s32);
    u32 ExecuteZeroExtendByteToWord(u8);
    u32 ExecuteZeroExtendHalfToWord(u16);
    u64 ExecuteZeroExtendByteToLong(u8);
    u64 ExecuteZeroExtendHalfToLong(u16);
    u64 ExecuteZeroExtendWordToLong(u32);
    Vector ExecuteZeroExtendLongToQuad(u64);
    u32 ExecuteByteReverseWord(u32);
    u16 ExecuteByteReverseHalf(u16);
    u64 ExecuteByteReverseDual(u64);
    u32 ExecuteCountLeadingZeros32(u32);
    u64 ExecuteCountLeadingZeros64(u64);
    u32 ExecuteExtractRegister32(u32, u32, u8);
    u64 ExecuteExtractRegister64(u64, u64, u8);
    s32 ExecuteMaxSigned32(s32, s32);
    s64 ExecuteMaxSigned64(s64, s64);
    u32 ExecuteMaxUnsigned32(u32, u32);
    u64 ExecuteMaxUnsigned64(u64, u64);
    s32 ExecuteMinSigned32(s32, s32);
    s64 ExecuteMinSigned64(s64, s64);
    u32 ExecuteMinUnsigned32(u32, u32);
    u64 ExecuteMinUnsigned64(u64, u64);

    // Saturated instructions
    ResultAndOverflow<s8> ExecuteSignedSaturatedAdd8(s8, s8);
    ResultAndOverflow<s16> ExecuteSignedSaturatedAdd16(s16, s16);
    ResultAndOverflow<s32> ExecuteSignedSaturatedAdd32(s32, s32);
    ResultAndOverflow<s64> ExecuteSignedSaturatedAdd64(s64, s64);
    ResultAndOverflow<s16> ExecuteSignedSaturatedDoublingMultiplyReturnHigh16(s16, s16);
    ResultAndOverflow<s32> ExecuteSignedSaturatedDoublingMultiplyReturnHigh32(s32, s32);
    ResultAndOverflow<s8> ExecuteSignedSaturatedSub8(s8, s8);
    ResultAndOverflow<s16> ExecuteSignedSaturatedSub16(s16, s16);
    ResultAndOverflow<s32> ExecuteSignedSaturatedSub32(s32, s32);
    ResultAndOverflow<s64> ExecuteSignedSaturatedSub64(s64, s64);
    ResultAndOverflow<s32> ExecuteSignedSaturation(s32, u8);
    ResultAndOverflow<u8> ExecuteUnsignedSaturatedAdd8(u8, u8);
    ResultAndOverflow<u16> ExecuteUnsignedSaturatedAdd16(u16, u16);
    ResultAndOverflow<u32> ExecuteUnsignedSaturatedAdd32(u32, u32);
    ResultAndOverflow<u64> ExecuteUnsignedSaturatedAdd64(u64, u64);
    ResultAndOverflow<u8> ExecuteUnsignedSaturatedSub8(u8, u8);
    ResultAndOverflow<u16> ExecuteUnsignedSaturatedSub16(u16, u16);
    ResultAndOverflow<u32> ExecuteUnsignedSaturatedSub32(u32, u32);
    ResultAndOverflow<u64> ExecuteUnsignedSaturatedSub64(u64, u64);
    ResultAndOverflow<u32> ExecuteUnsignedSaturation(u32, u8);

    // Packed instructions
    ResultAndGE<u32> ExecutePackedAddU8(u32, u32);
    ResultAndGE<u32> ExecutePackedAddS8(u32, u32);
    ResultAndGE<u32> ExecutePackedSubU8(u32, u32);
    ResultAndGE<u32> ExecutePackedSubS8(u32, u32);
    ResultAndGE<u32> ExecutePackedAddU16(u32, u32);
    ResultAndGE<u32> ExecutePackedAddS16(u32, u32);
    ResultAndGE<u32> ExecutePackedSubU16(u32, u32);
    ResultAndGE<u32> ExecutePackedSubS16(u32, u32);
    ResultAndGE<u32> ExecutePackedAddSubU16(u32, u32);
    ResultAndGE<u32> ExecutePackedAddSubS16(u32, u32);
    ResultAndGE<u32> ExecutePackedSubAddU16(u32, u32);
    ResultAndGE<u32> ExecutePackedSubAddS16(u32, u32);
    u32 ExecutePackedHalvingAddU8(u32, u32);
    u32 ExecutePackedHalvingAddS8(u32, u32);
    u32 ExecutePackedHalvingSubU8(u32, u32);
    u32 ExecutePackedHalvingSubS8(u32, u32);
    u32 ExecutePackedHalvingAddU16(u32, u32);
    u32 ExecutePackedHalvingAddS16(u32, u32);
    u32 ExecutePackedHalvingSubU16(u32, u32);
    u32 ExecutePackedHalvingSubS16(u32, u32);
    u32 ExecutePackedHalvingAddSubU16(u32, u32);
    u32 ExecutePackedHalvingAddSubS16(u32, u32);
    u32 ExecutePackedHalvingSubAddU16(u32, u32);
    u32 ExecutePackedHalvingSubAddS16(u32, u32);
    u32 ExecutePackedSaturatedAddU8(u32, u32);
    u32 ExecutePackedSaturatedAddS8(u32, u32);
    u32 ExecutePackedSaturatedSubU8(u32, u32);
    u32 ExecutePackedSaturatedSubS8(u32, u32);
    u32 ExecutePackedSaturatedAddU16(u32, u32);
    u32 ExecutePackedSaturatedAddS16(u32, u32);
    u32 ExecutePackedSaturatedSubU16(u32, u32);
    u32 ExecutePackedSaturatedSubS16(u32, u32);
    u32 ExecutePackedAbsDiffSumS8(u32, u32);
    u32 ExecutePackedSelect(u32, u32, u32);

    // CRC instructions
    u32 ExecuteCRC32Castagnoli8(u32, u32);
    u32 ExecuteCRC32Castagnoli16(u32, u32);
    u32 ExecuteCRC32Castagnoli32(u32, u32);
    u32 ExecuteCRC32Castagnoli64(u32, u64);
    u32 ExecuteCRC32ISO8(u32, u32);
    u32 ExecuteCRC32ISO16(u32, u32);
    u32 ExecuteCRC32ISO32(u32, u32);
    u32 ExecuteCRC32ISO64(u32, u64);

    // AES instructions
    Vector ExecuteAESDecryptSingleRound(Vector);
    Vector ExecuteAESEncryptSingleRound(Vector);
    Vector ExecuteAESInverseMixColumns(Vector);
    Vector ExecuteAESMixColumns(Vector);

    // SM4 instructions
    u8 ExecuteSM4AccessSubstitutionBox(u8);

    // Vector instructions
    VectorOf<u8> ExecuteVectorGetElement8(VectorOf<u8>, u8);
    VectorOf<u16> ExecuteVectorGetElement16(VectorOf<u16>, u8);
    VectorOf<u32> ExecuteVectorGetElement32(VectorOf<u32>, u8);
    VectorOf<u64> ExecuteVectorGetElement64(VectorOf<u64>, u8);
    VectorOf<u8> ExecuteVectorSetElement8(VectorOf<u8>, u8, u8);
    VectorOf<u16> ExecuteVectorSetElement16(VectorOf<u16>, u8, u16);
    VectorOf<u32> ExecuteVectorSetElement32(VectorOf<u32>, u8, u32);
    VectorOf<u64> ExecuteVectorSetElement64(VectorOf<u64>, u8, u64);
    VectorOf<u8> ExecuteVectorAbs8(VectorOf<u8>);
    VectorOf<u16> ExecuteVectorAbs16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorAbs32(VectorOf<u32>);
    VectorOf<u64> ExecuteVectorAbs64(VectorOf<u64>);
    VectorOf<u8> ExecuteVectorAdd8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorAdd16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorAdd32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorAdd64(VectorOf<u64>, VectorOf<u64>);
    Vector ExecuteVectorAnd(Vector, Vector);
    VectorOf<u8> ExecuteVectorArithmeticShiftRight8(VectorOf<u8>, u8);
    VectorOf<u16> ExecuteVectorArithmeticShiftRight16(VectorOf<u16>, u8);
    VectorOf<u32> ExecuteVectorArithmeticShiftRight32(VectorOf<u32>, u8);
    VectorOf<u64> ExecuteVectorArithmeticShiftRight64(VectorOf<u64>, u8);
    VectorOf<u8> ExecuteVectorArithmeticVShift8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorArithmeticVShift16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorArithmeticVShift32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorArithmeticVShift64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorBroadcastLower8(u8);
    VectorOf<u16> ExecuteVectorBroadcastLower16(u16);
    VectorOf<u32> ExecuteVectorBroadcastLower32(u32);
    VectorOf<u8> ExecuteVectorBroadcast8(u8);
    VectorOf<u16> ExecuteVectorBroadcast16(u16);
    VectorOf<u32> ExecuteVectorBroadcast32(u32);
    VectorOf<u64> ExecuteVectorBroadcast64(u64);
    VectorOf<u8> ExecuteVectorCountLeadingZeros8(VectorOf<u8>);
    VectorOf<u16> ExecuteVectorCountLeadingZeros16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorCountLeadingZeros32(VectorOf<u32>);
    VectorOf<u8> ExecuteVectorDeinterleaveEven8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorDeinterleaveEven16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorDeinterleaveEven32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorDeinterleaveEven64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorDeinterleaveOdd8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorDeinterleaveOdd16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorDeinterleaveOdd32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorDeinterleaveOdd64(VectorOf<u64>, VectorOf<u64>);
    Vector ExecuteVectorEor(Vector, Vector);
    VectorOf<u8> ExecuteVectorEqual8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorEqual16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorEqual32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorEqual64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorEqual128(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u8> ExecuteVectorExtract(VectorOf<u8>, VectorOf<u8>, u8);
    VectorOf<u8> ExecuteVectorExtractLower(VectorOf<u8>, VectorOf<u8>, u8);
    VectorOf<u8> ExecuteVectorGreaterS8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorGreaterS16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorGreaterS32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorGreaterS64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorHalvingAddS8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorHalvingAddS16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorHalvingAddS32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorHalvingAddU8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorHalvingAddu16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorHalvingAddu32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorHalvingSubS8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorHalvingSubS16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorHalvingSubS32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorHalvingSubU8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorHalvingSubu16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorHalvingSubu32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorInterleaveLower8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorInterleaveLower16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorInterleaveLower32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorInterleaveLower64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorInterleaveUpper8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorInterleaveUpper16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorInterleaveUpper32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorInterleaveUpper64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorLogicalShiftLeft8(VectorOf<u8>, u8);
    VectorOf<u16> ExecuteVectorLogicalShiftLeft16(VectorOf<u16>, u8);
    VectorOf<u32> ExecuteVectorLogicalShiftLeft32(VectorOf<u32>, u8);
    VectorOf<u64> ExecuteVectorLogicalShiftLeft64(VectorOf<u64>, u8);
    VectorOf<u8> ExecuteVectorLogicalShiftRight8(VectorOf<u8>, u8);
    VectorOf<u16> ExecuteVectorLogicalShiftRight16(VectorOf<u16>, u8);
    VectorOf<u32> ExecuteVectorLogicalShiftRight32(VectorOf<u32>, u8);
    VectorOf<u64> ExecuteVectorLogicalShiftRight64(VectorOf<u64>, u8);
    VectorOf<u8> ExecuteVectorLogicalVShift8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorLogicalVShift16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorLogicalVShift32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorLogicalVShift64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorMaxS8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorMaxS16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorMaxS32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorMaxS64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorMaxU8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorMaxu16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorMaxu32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorMaxu64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorMinS8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorMinS16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorMinS32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorMinS64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorMinU8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorMinu16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorMinu32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorMinu64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorMultiply8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorMultiply16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorMultiply32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorMultiply64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u16> ExecuteVectorNarrow16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorNarrow32(VectorOf<u32>);
    VectorOf<u64> ExecuteVectorNarrow64(VectorOf<u64>);
    Vector ExecuteVectorNot(Vector);
    Vector ExecuteVectorOr(Vector, Vector);
    VectorOf<u8> ExecuteVectorPairedAddLower8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorPairedAddLower16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorPairedAddLower32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorPairedAddSignedWiden8(VectorOf<u8>);
    VectorOf<u16> ExecuteVectorPairedAddSignedWiden16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorPairedAddSignedWiden32(VectorOf<u32>);
    VectorOf<u8> ExecuteVectorPairedAddUnsignedWiden8(VectorOf<u8>);
    VectorOf<u16> ExecuteVectorPairedAddUnsignedWiden16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorPairedAddUnsignedWiden32(VectorOf<u32>);
    VectorOf<u8> ExecuteVectorPairedAdd8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorPairedAdd16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorPairedAdd32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorPairedAdd64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorPairedMaxS8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorPairedMaxS16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorPairedMaxS32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorPairedMaxU8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorPairedMaxu16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorPairedMaxu32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorPairedMinS8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorPairedMinS16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorPairedMinS32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorPairedMinU8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorPairedMinu16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorPairedMinu32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorPolynomialMultiply8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u8> ExecuteVectorPolynomialMultiplyLong8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u64> ExecuteVectorPolynomialMultiplyLong64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorPopulationCount(VectorOf<u8>);
    VectorOf<u8> ExecuteVectorReverseBits(VectorOf<u8>);
    VectorOf<u8> ExecuteVectorRoundingHalvingAddS8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorRoundingHalvingAddS16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorRoundingHalvingAddS32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorRoundingHalvingAddU8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorRoundingHalvingAddu16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorRoundingHalvingAddu32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorRoundingShiftLeftS8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorRoundingShiftLeftS16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorRoundingShiftLeftS32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorRoundingShiftLeftS64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorRoundingShiftLeftU8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorRoundingShiftLeftu16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorRoundingShiftLeftu32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorRoundingShiftLeftu64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u16> ExecuteVectorShuffleHighHalfwords(VectorOf<u16>, u8);
    VectorOf<u16> ExecuteVectorShuffleLowHalfwords(VectorOf<u16>, u8);
    VectorOf<u32> ExecuteVectorShuffleWords(VectorOf<u32>, u8);
    VectorOf<u8> ExecuteVectorSignExtend8(VectorOf<u8>);
    VectorOf<u16> ExecuteVectorSignExtend16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSignExtend32(VectorOf<u32>);
    VectorOf<u64> ExecuteVectorSignExtend64(VectorOf<u64>);
    VectorOf<u8> ExecuteVectorSignedAbsoluteDifference8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorSignedAbsoluteDifference16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSignedAbsoluteDifference32(VectorOf<u32>, VectorOf<u32>);
    UpperAndLowerOf<u16> ExecuteVectorSignedMultiply16(VectorOf<u16>, VectorOf<u16>);
    UpperAndLowerOf<u32> ExecuteVectorSignedMultiply32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u8> ExecuteVectorSignedSaturatedAbs8(VectorOf<u8>);
    VectorOf<u16> ExecuteVectorSignedSaturatedAbs16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSignedSaturatedAbs32(VectorOf<u32>);
    VectorOf<u64> ExecuteVectorSignedSaturatedAbs64(VectorOf<u64>);
    VectorOf<u8> ExecuteVectorSignedSaturatedAccumulateUnsigned8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorSignedSaturatedAccumulateUnsigned16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSignedSaturatedAccumulateUnsigned32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorSignedSaturatedAccumulateUnsigned64(VectorOf<u64>, VectorOf<u64>);
    UpperAndLowerOf<u16> ExecuteVectorSignedSaturatedDoublingMultiply16(VectorOf<u16>, VectorOf<u16>);
    UpperAndLowerOf<u32> ExecuteVectorSignedSaturatedDoublingMultiply32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u16> ExecuteVectorSignedSaturatedDoublingMultiplyLong16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSignedSaturatedDoublingMultiplyLong32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u16> ExecuteVectorSignedSaturatedNarrowToSigned16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSignedSaturatedNarrowToSigned32(VectorOf<u32>);
    VectorOf<u64> ExecuteVectorSignedSaturatedNarrowToSigned64(VectorOf<u64>);
    VectorOf<u16> ExecuteVectorSignedSaturatedNarrowToUnsigned16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSignedSaturatedNarrowToUnsigned32(VectorOf<u32>);
    VectorOf<u64> ExecuteVectorSignedSaturatedNarrowToUnsigned64(VectorOf<u64>);
    VectorOf<u8> ExecuteVectorSignedSaturatedNeg8(VectorOf<u8>);
    VectorOf<u16> ExecuteVectorSignedSaturatedNeg16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSignedSaturatedNeg32(VectorOf<u32>);
    VectorOf<u64> ExecuteVectorSignedSaturatedNeg64(VectorOf<u64>);
    VectorOf<u8> ExecuteVectorSignedSaturatedShiftLeft8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorSignedSaturatedShiftLeft16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSignedSaturatedShiftLeft32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorSignedSaturatedShiftLeft64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorSignedSaturatedShiftLeftUnsigned8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorSignedSaturatedShiftLeftUnsigned16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSignedSaturatedShiftLeftUnsigned32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorSignedSaturatedShiftLeftUnsigned64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorSub8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorSub16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorSub32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorSub64(VectorOf<u64>, VectorOf<u64>);
    void ExecuteVectorTable();
    void ExecuteVectorTableLookup(ExecutionContext&, IR::Inst*);
    VectorOf<u8> ExecuteVectorUnsignedAbsoluteDifference8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorUnsignedAbsoluteDifference16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorUnsignedAbsoluteDifference32(VectorOf<u32>, VectorOf<u32>);
    UpperAndLowerOf<u16> ExecuteVectorUnsignedMultiply16(VectorOf<u16>, VectorOf<u16>);
    UpperAndLowerOf<u16> ExecuteVectorUnsignedMultiply32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u32> ExecuteVectorUnsignedRecipEstimate(VectorOf<u32>);
    VectorOf<u32> ExecuteVectorUnsignedRecipSqrtEstimate(VectorOf<u32>);
    VectorOf<u8> ExecuteVectorUnsignedSaturatedAccumulateSigned8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorUnsignedSaturatedAccumulateSigned16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorUnsignedSaturatedAccumulateSigned32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorUnsignedSaturatedAccumulateSigned64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u16> ExecuteVectorUnsignedSaturatedNarrow16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorUnsignedSaturatedNarrow32(VectorOf<u32>);
    VectorOf<u64> ExecuteVectorUnsignedSaturatedNarrow64(VectorOf<u64>);
    VectorOf<u8> ExecuteVectorUnsignedSaturatedShiftLeft8(VectorOf<u8>, VectorOf<u8>);
    VectorOf<u16> ExecuteVectorUnsignedSaturatedShiftLeft16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteVectorUnsignedSaturatedShiftLeft32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteVectorUnsignedSaturatedShiftLeft64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u8> ExecuteVectorZeroExtend8(VectorOf<u8>);
    VectorOf<u16> ExecuteVectorZeroExtend16(VectorOf<u16>);
    VectorOf<u32> ExecuteVectorZeroExtend32(VectorOf<u32>);
    VectorOf<u64> ExecuteVectorZeroExtend64(VectorOf<u64>);
    Vector ExecuteVectorZeroUpper(Vector);
    Vector ExecuteZeroVector();

    // Floating-point operations
    u16 ExecuteFPAbs16(u16);
    u32 ExecuteFPAbs32(u32);
    u64 ExecuteFPAbs64(u64);
    u32 ExecuteFPAdd32(u32, u32);
    u64 ExecuteFPAdd64(u64, u64);
    NZCV ExecuteFPCompare32(u32, u32, bool);
    NZCV ExecuteFPCompare64(u64, u64, bool);
    u32 ExecuteFPDiv32(u32, u32);
    u64 ExecuteFPDiv64(u64, u64);
    u32 ExecuteFPMax32(u32, u32);
    u64 ExecuteFPMax64(u64, u64);
    u32 ExecuteFPMaxNumeric32(u32, u32);
    u64 ExecuteFPMaxNumeric64(u64, u64);
    u32 ExecuteFPMin32(u32, u32);
    u64 ExecuteFPMin64(u64, u64);
    u32 ExecuteFPMinNumeric32(u32, u32);
    u64 ExecuteFPMinNumeric64(u64, u64);
    u32 ExecuteFPMul32(u32, u32);
    u64 ExecuteFPMul64(u64, u64);
    u16 ExecuteFPMulAdd16(u16, u16, u16);
    u32 ExecuteFPMulAdd32(u32, u32, u32);
    u64 ExecuteFPMulAdd64(u64, u64, u64);
    u32 ExecuteFPMulX32(u32, u32);
    u64 ExecuteFPMulX64(u64, u64);
    u16 ExecuteFPNeg16(u16);
    u32 ExecuteFPNeg32(u32);
    u64 ExecuteFPNeg64(u64);
    u16 ExecuteFPRecipEstimate16(u16);
    u32 ExecuteFPRecipEstimate32(u32);
    u64 ExecuteFPRecipEstimate64(u64);
    u16 ExecuteFPRecipExponent16(u16);
    u32 ExecuteFPRecipExponent32(u32);
    u64 ExecuteFPRecipExponent64(u64);
    u16 ExecuteFPRecipStepFused16(u16, u16);
    u32 ExecuteFPRecipStepFused32(u32, u32);
    u64 ExecuteFPRecipStepFused64(u64, u64);
    u16 ExecuteFPRoundInt16(u16, u8, bool);
    u32 ExecuteFPRoundInt32(u32, u8, bool);
    u64 ExecuteFPRoundInt64(u64, u8, bool);
    u16 ExecuteFPRSqrtEstimate16(u16);
    u32 ExecuteFPRSqrtEstimate32(u32);
    u64 ExecuteFPRSqrtEstimate64(u64);
    u16 ExecuteFPRSqrtStepFused16(u16, u16);
    u32 ExecuteFPRSqrtStepFused32(u32, u32);
    u64 ExecuteFPRSqrtStepFused64(u64, u64);
    u32 ExecuteFPSqrt32(u32);
    u64 ExecuteFPSqrt64(u64);
    u32 ExecuteFPSub32(u32, u32);
    u64 ExecuteFPSub64(u64, u64);
    u64 ExecuteFPHalfToDouble(u16, u8);
    u32 ExecuteFPHalfToSingle(u16, u8);
    u64 ExecuteFPSingleToDouble(u32, u8);
    u16 ExecuteFPSingleToHalf(u32, u8);
    u16 ExecuteFPDoubleToHalf(u64, u8);
    u32 ExecuteFPDoubleToSingle(u64, u8);
    u32 ExecuteFPDoubleToFixedS32(u64, u8, u8);
    u64 ExecuteFPDoubleToFixedS64(u64, u8, u8);
    u32 ExecuteFPDoubleToFixedu32(u64, u8, u8);
    u64 ExecuteFPDoubleToFixedu64(u64, u8, u8);
    u32 ExecuteFPHalfToFixedS32(u16, u8, u8);
    u64 ExecuteFPHalfToFixedS64(u16, u8, u8);
    u32 ExecuteFPHalfToFixedu32(u16, u8, u8);
    u64 ExecuteFPHalfToFixedu64(u16, u8, u8);
    u32 ExecuteFPSingleToFixedS32(u32, u8, u8);
    u64 ExecuteFPSingleToFixedS64(u32, u8, u8);
    u32 ExecuteFPSingleToFixedu32(u32, u8, u8);
    u64 ExecuteFPSingleToFixedu64(u32, u8, u8);
    u32 ExecuteFPFixedu32ToSingle(u32, u8, u8);
    u32 ExecuteFPFixedS32ToSingle(u32, u8, u8);
    u64 ExecuteFPFixedu32ToDouble(u32, u8, u8);
    u64 ExecuteFPFixedu64ToDouble(u64, u8, u8);
    u32 ExecuteFPFixedu64ToSingle(u64, u8, u8);
    u64 ExecuteFPFixedS32ToDouble(u32, u8, u8);
    u64 ExecuteFPFixedS64ToDouble(u64, u8, u8);
    u32 ExecuteFPFixedS64ToSingle(u64, u8, u8);

    // Floating-point vector instructions
    VectorOf<u16> ExecuteFPVectorAbs16(VectorOf<u16>);
    VectorOf<u32> ExecuteFPVectorAbs32(VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorAbs64(VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorAdd32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorAdd64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorDiv32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorDiv64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u16> ExecuteFPVectorEqual16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteFPVectorEqual32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorEqual64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorFromSignedFixed32(VectorOf<u32>, u8, u8);
    VectorOf<u64> ExecuteFPVectorFromSignedFixed64(VectorOf<u64>, u8, u8);
    VectorOf<u32> ExecuteFPVectorFromUnsignedFixed32(VectorOf<u32>, u8, u8);
    VectorOf<u64> ExecuteFPVectorFromUnsignedFixed64(VectorOf<u64>, u8, u8);
    VectorOf<u32> ExecuteFPVectorGreater32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorGreater64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorGreaterEqual32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorGreaterEqual64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorMax32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorMax64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorMin32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorMin64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorMul32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorMul64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u16> ExecuteFPVectorMulAdd16(VectorOf<u16>, VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteFPVectorMulAdd32(VectorOf<u32>, VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorMulAdd64(VectorOf<u64>, VectorOf<u64>, VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorMulX32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorMulX64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u16> ExecuteFPVectorNeg16(VectorOf<u16>);
    VectorOf<u32> ExecuteFPVectorNeg32(VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorNeg64(VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorPairedAdd32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorPairedAdd64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorPairedAddLower32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorPairedAddLower64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u16> ExecuteFPVectorRecipEstimate16(VectorOf<u16>);
    VectorOf<u32> ExecuteFPVectorRecipEstimate32(VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorRecipEstimate64(VectorOf<u64>);
    VectorOf<u16> ExecuteFPVectorRecipStepFused16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteFPVectorRecipStepFused32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorRecipStepFused64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u16> ExecuteFPVectorRoundInt16(VectorOf<u16>, u8, bool);
    VectorOf<u32> ExecuteFPVectorRoundInt32(VectorOf<u32>, u8, bool);
    VectorOf<u64> ExecuteFPVectorRoundInt64(VectorOf<u64>, u8, bool);
    VectorOf<u16> ExecuteFPVectorRSqrtEstimate16(VectorOf<u16>);
    VectorOf<u32> ExecuteFPVectorRSqrtEstimate32(VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorRSqrtEstimate64(VectorOf<u64>);
    VectorOf<u16> ExecuteFPVectorRSqrtStepFused16(VectorOf<u16>, VectorOf<u16>);
    VectorOf<u32> ExecuteFPVectorRSqrtStepFused32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorRSqrtStepFused64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorSqrt32(VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorSqrt64(VectorOf<u64>);
    VectorOf<u32> ExecuteFPVectorSub32(VectorOf<u32>, VectorOf<u32>);
    VectorOf<u64> ExecuteFPVectorSub64(VectorOf<u64>, VectorOf<u64>);
    VectorOf<u16> ExecuteFPVectorToSignedFixed16(VectorOf<u16>, u8, u8);
    VectorOf<u32> ExecuteFPVectorToSignedFixed32(VectorOf<u32>, u8, u8);
    VectorOf<u64> ExecuteFPVectorToSignedFixed64(VectorOf<u64>, u8, u8);
    VectorOf<u16> ExecuteFPVectorToUnsignedFixed16(VectorOf<u16>, u8, u8);
    VectorOf<u32> ExecuteFPVectorToUnsignedFixed32(VectorOf<u32>, u8, u8);
    VectorOf<u64> ExecuteFPVectorToUnsignedFixed64(VectorOf<u64>, u8, u8);
};

} // namespace Dynarmic::Backend::Interpreter
